{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://json-navigator/./node_modules/jsonc-parser/lib/esm/impl/scanner.js","webpack://json-navigator/./node_modules/jsonc-parser/lib/esm/impl/string-intern.js","webpack://json-navigator/./node_modules/jsonc-parser/lib/esm/impl/format.js","webpack://json-navigator/./node_modules/jsonc-parser/lib/esm/impl/parser.js","webpack://json-navigator/./node_modules/jsonc-parser/lib/esm/impl/edit.js","webpack://json-navigator/./node_modules/jsonc-parser/lib/esm/main.js","webpack://json-navigator/./src/extension.ts","webpack://json-navigator/external commonjs \"vscode\"","webpack://json-navigator/webpack/bootstrap","webpack://json-navigator/webpack/runtime/define property getters","webpack://json-navigator/webpack/runtime/hasOwnProperty shorthand","webpack://json-navigator/webpack/runtime/make namespace object","webpack://json-navigator/webpack/startup"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text, ignoreTrivia = false) {\n    const len = text.length;\n    let pos = 0, value = '', tokenOffset = 0, token = 16 /* SyntaxKind.Unknown */, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0 /* ScanError.None */;\n    function scanHexDigits(count, exact) {\n        let digits = 0;\n        let value = 0;\n        while (digits < count || !exact) {\n            let ch = text.charCodeAt(pos);\n            if (ch >= 48 /* CharacterCodes._0 */ && ch <= 57 /* CharacterCodes._9 */) {\n                value = value * 16 + ch - 48 /* CharacterCodes._0 */;\n            }\n            else if (ch >= 65 /* CharacterCodes.A */ && ch <= 70 /* CharacterCodes.F */) {\n                value = value * 16 + ch - 65 /* CharacterCodes.A */ + 10;\n            }\n            else if (ch >= 97 /* CharacterCodes.a */ && ch <= 102 /* CharacterCodes.f */) {\n                value = value * 16 + ch - 97 /* CharacterCodes.a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* SyntaxKind.Unknown */;\n        scanError = 0 /* ScanError.None */;\n    }\n    function scanNumber() {\n        let start = pos;\n        if (text.charCodeAt(pos) === 48 /* CharacterCodes._0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* CharacterCodes.dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* ScanError.UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        let end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* CharacterCodes.E */ || text.charCodeAt(pos) === 101 /* CharacterCodes.e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* CharacterCodes.plus */ || text.charCodeAt(pos) === 45 /* CharacterCodes.minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* ScanError.UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        let result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* ScanError.UnexpectedEndOfString */;\n                break;\n            }\n            const ch = text.charCodeAt(pos);\n            if (ch === 34 /* CharacterCodes.doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* CharacterCodes.backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* ScanError.UnexpectedEndOfString */;\n                    break;\n                }\n                const ch2 = text.charCodeAt(pos++);\n                switch (ch2) {\n                    case 34 /* CharacterCodes.doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* CharacterCodes.backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* CharacterCodes.slash */:\n                        result += '/';\n                        break;\n                    case 98 /* CharacterCodes.b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* CharacterCodes.f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* CharacterCodes.n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* CharacterCodes.r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* CharacterCodes.t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* CharacterCodes.u */:\n                        const ch3 = scanHexDigits(4, true);\n                        if (ch3 >= 0) {\n                            result += String.fromCharCode(ch3);\n                        }\n                        else {\n                            scanError = 4 /* ScanError.InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* ScanError.InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* ScanError.UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* ScanError.InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* ScanError.None */;\n        tokenOffset = pos;\n        lineStartOffset = lineNumber;\n        prevTokenLineStartOffset = tokenLineStartOffset;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* SyntaxKind.EOF */;\n        }\n        let code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* SyntaxKind.Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* CharacterCodes.carriageReturn */ && text.charCodeAt(pos) === 10 /* CharacterCodes.lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            lineNumber++;\n            tokenLineStartOffset = pos;\n            return token = 14 /* SyntaxKind.LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* CharacterCodes.openBrace */:\n                pos++;\n                return token = 1 /* SyntaxKind.OpenBraceToken */;\n            case 125 /* CharacterCodes.closeBrace */:\n                pos++;\n                return token = 2 /* SyntaxKind.CloseBraceToken */;\n            case 91 /* CharacterCodes.openBracket */:\n                pos++;\n                return token = 3 /* SyntaxKind.OpenBracketToken */;\n            case 93 /* CharacterCodes.closeBracket */:\n                pos++;\n                return token = 4 /* SyntaxKind.CloseBracketToken */;\n            case 58 /* CharacterCodes.colon */:\n                pos++;\n                return token = 6 /* SyntaxKind.ColonToken */;\n            case 44 /* CharacterCodes.comma */:\n                pos++;\n                return token = 5 /* SyntaxKind.CommaToken */;\n            // strings\n            case 34 /* CharacterCodes.doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* SyntaxKind.StringLiteral */;\n            // comments\n            case 47 /* CharacterCodes.slash */:\n                const start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* CharacterCodes.slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* SyntaxKind.LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* CharacterCodes.asterisk */) {\n                    pos += 2;\n                    const safeLength = len - 1; // For lookahead.\n                    let commentClosed = false;\n                    while (pos < safeLength) {\n                        const ch = text.charCodeAt(pos);\n                        if (ch === 42 /* CharacterCodes.asterisk */ && text.charCodeAt(pos + 1) === 47 /* CharacterCodes.slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                        if (isLineBreak(ch)) {\n                            if (ch === 13 /* CharacterCodes.carriageReturn */ && text.charCodeAt(pos) === 10 /* CharacterCodes.lineFeed */) {\n                                pos++;\n                            }\n                            lineNumber++;\n                            tokenLineStartOffset = pos;\n                        }\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* ScanError.UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* SyntaxKind.BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* SyntaxKind.Unknown */;\n            // numbers\n            case 45 /* CharacterCodes.minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* SyntaxKind.Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* CharacterCodes._0 */:\n            case 49 /* CharacterCodes._1 */:\n            case 50 /* CharacterCodes._2 */:\n            case 51 /* CharacterCodes._3 */:\n            case 52 /* CharacterCodes._4 */:\n            case 53 /* CharacterCodes._5 */:\n            case 54 /* CharacterCodes._6 */:\n            case 55 /* CharacterCodes._7 */:\n            case 56 /* CharacterCodes._8 */:\n            case 57 /* CharacterCodes._9 */:\n                value += scanNumber();\n                return token = 11 /* SyntaxKind.NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* SyntaxKind.TrueKeyword */;\n                        case 'false': return token = 9 /* SyntaxKind.FalseKeyword */;\n                        case 'null': return token = 7 /* SyntaxKind.NullKeyword */;\n                    }\n                    return token = 16 /* SyntaxKind.Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* SyntaxKind.Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* CharacterCodes.closeBrace */:\n            case 93 /* CharacterCodes.closeBracket */:\n            case 123 /* CharacterCodes.openBrace */:\n            case 91 /* CharacterCodes.openBracket */:\n            case 34 /* CharacterCodes.doubleQuote */:\n            case 58 /* CharacterCodes.colon */:\n            case 44 /* CharacterCodes.comma */:\n            case 47 /* CharacterCodes.slash */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        let result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* SyntaxKind.LineCommentTrivia */ && result <= 15 /* SyntaxKind.Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: () => pos,\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: () => token,\n        getTokenValue: () => value,\n        getTokenOffset: () => tokenOffset,\n        getTokenLength: () => pos - tokenOffset,\n        getTokenStartLine: () => lineStartOffset,\n        getTokenStartCharacter: () => tokenOffset - prevTokenLineStartOffset,\n        getTokenError: () => scanError,\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* CharacterCodes.space */ || ch === 9 /* CharacterCodes.tab */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* CharacterCodes.lineFeed */ || ch === 13 /* CharacterCodes.carriageReturn */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* CharacterCodes._0 */ && ch <= 57 /* CharacterCodes._9 */;\n}\nvar CharacterCodes;\n(function (CharacterCodes) {\n    CharacterCodes[CharacterCodes[\"lineFeed\"] = 10] = \"lineFeed\";\n    CharacterCodes[CharacterCodes[\"carriageReturn\"] = 13] = \"carriageReturn\";\n    CharacterCodes[CharacterCodes[\"space\"] = 32] = \"space\";\n    CharacterCodes[CharacterCodes[\"_0\"] = 48] = \"_0\";\n    CharacterCodes[CharacterCodes[\"_1\"] = 49] = \"_1\";\n    CharacterCodes[CharacterCodes[\"_2\"] = 50] = \"_2\";\n    CharacterCodes[CharacterCodes[\"_3\"] = 51] = \"_3\";\n    CharacterCodes[CharacterCodes[\"_4\"] = 52] = \"_4\";\n    CharacterCodes[CharacterCodes[\"_5\"] = 53] = \"_5\";\n    CharacterCodes[CharacterCodes[\"_6\"] = 54] = \"_6\";\n    CharacterCodes[CharacterCodes[\"_7\"] = 55] = \"_7\";\n    CharacterCodes[CharacterCodes[\"_8\"] = 56] = \"_8\";\n    CharacterCodes[CharacterCodes[\"_9\"] = 57] = \"_9\";\n    CharacterCodes[CharacterCodes[\"a\"] = 97] = \"a\";\n    CharacterCodes[CharacterCodes[\"b\"] = 98] = \"b\";\n    CharacterCodes[CharacterCodes[\"c\"] = 99] = \"c\";\n    CharacterCodes[CharacterCodes[\"d\"] = 100] = \"d\";\n    CharacterCodes[CharacterCodes[\"e\"] = 101] = \"e\";\n    CharacterCodes[CharacterCodes[\"f\"] = 102] = \"f\";\n    CharacterCodes[CharacterCodes[\"g\"] = 103] = \"g\";\n    CharacterCodes[CharacterCodes[\"h\"] = 104] = \"h\";\n    CharacterCodes[CharacterCodes[\"i\"] = 105] = \"i\";\n    CharacterCodes[CharacterCodes[\"j\"] = 106] = \"j\";\n    CharacterCodes[CharacterCodes[\"k\"] = 107] = \"k\";\n    CharacterCodes[CharacterCodes[\"l\"] = 108] = \"l\";\n    CharacterCodes[CharacterCodes[\"m\"] = 109] = \"m\";\n    CharacterCodes[CharacterCodes[\"n\"] = 110] = \"n\";\n    CharacterCodes[CharacterCodes[\"o\"] = 111] = \"o\";\n    CharacterCodes[CharacterCodes[\"p\"] = 112] = \"p\";\n    CharacterCodes[CharacterCodes[\"q\"] = 113] = \"q\";\n    CharacterCodes[CharacterCodes[\"r\"] = 114] = \"r\";\n    CharacterCodes[CharacterCodes[\"s\"] = 115] = \"s\";\n    CharacterCodes[CharacterCodes[\"t\"] = 116] = \"t\";\n    CharacterCodes[CharacterCodes[\"u\"] = 117] = \"u\";\n    CharacterCodes[CharacterCodes[\"v\"] = 118] = \"v\";\n    CharacterCodes[CharacterCodes[\"w\"] = 119] = \"w\";\n    CharacterCodes[CharacterCodes[\"x\"] = 120] = \"x\";\n    CharacterCodes[CharacterCodes[\"y\"] = 121] = \"y\";\n    CharacterCodes[CharacterCodes[\"z\"] = 122] = \"z\";\n    CharacterCodes[CharacterCodes[\"A\"] = 65] = \"A\";\n    CharacterCodes[CharacterCodes[\"B\"] = 66] = \"B\";\n    CharacterCodes[CharacterCodes[\"C\"] = 67] = \"C\";\n    CharacterCodes[CharacterCodes[\"D\"] = 68] = \"D\";\n    CharacterCodes[CharacterCodes[\"E\"] = 69] = \"E\";\n    CharacterCodes[CharacterCodes[\"F\"] = 70] = \"F\";\n    CharacterCodes[CharacterCodes[\"G\"] = 71] = \"G\";\n    CharacterCodes[CharacterCodes[\"H\"] = 72] = \"H\";\n    CharacterCodes[CharacterCodes[\"I\"] = 73] = \"I\";\n    CharacterCodes[CharacterCodes[\"J\"] = 74] = \"J\";\n    CharacterCodes[CharacterCodes[\"K\"] = 75] = \"K\";\n    CharacterCodes[CharacterCodes[\"L\"] = 76] = \"L\";\n    CharacterCodes[CharacterCodes[\"M\"] = 77] = \"M\";\n    CharacterCodes[CharacterCodes[\"N\"] = 78] = \"N\";\n    CharacterCodes[CharacterCodes[\"O\"] = 79] = \"O\";\n    CharacterCodes[CharacterCodes[\"P\"] = 80] = \"P\";\n    CharacterCodes[CharacterCodes[\"Q\"] = 81] = \"Q\";\n    CharacterCodes[CharacterCodes[\"R\"] = 82] = \"R\";\n    CharacterCodes[CharacterCodes[\"S\"] = 83] = \"S\";\n    CharacterCodes[CharacterCodes[\"T\"] = 84] = \"T\";\n    CharacterCodes[CharacterCodes[\"U\"] = 85] = \"U\";\n    CharacterCodes[CharacterCodes[\"V\"] = 86] = \"V\";\n    CharacterCodes[CharacterCodes[\"W\"] = 87] = \"W\";\n    CharacterCodes[CharacterCodes[\"X\"] = 88] = \"X\";\n    CharacterCodes[CharacterCodes[\"Y\"] = 89] = \"Y\";\n    CharacterCodes[CharacterCodes[\"Z\"] = 90] = \"Z\";\n    CharacterCodes[CharacterCodes[\"asterisk\"] = 42] = \"asterisk\";\n    CharacterCodes[CharacterCodes[\"backslash\"] = 92] = \"backslash\";\n    CharacterCodes[CharacterCodes[\"closeBrace\"] = 125] = \"closeBrace\";\n    CharacterCodes[CharacterCodes[\"closeBracket\"] = 93] = \"closeBracket\";\n    CharacterCodes[CharacterCodes[\"colon\"] = 58] = \"colon\";\n    CharacterCodes[CharacterCodes[\"comma\"] = 44] = \"comma\";\n    CharacterCodes[CharacterCodes[\"dot\"] = 46] = \"dot\";\n    CharacterCodes[CharacterCodes[\"doubleQuote\"] = 34] = \"doubleQuote\";\n    CharacterCodes[CharacterCodes[\"minus\"] = 45] = \"minus\";\n    CharacterCodes[CharacterCodes[\"openBrace\"] = 123] = \"openBrace\";\n    CharacterCodes[CharacterCodes[\"openBracket\"] = 91] = \"openBracket\";\n    CharacterCodes[CharacterCodes[\"plus\"] = 43] = \"plus\";\n    CharacterCodes[CharacterCodes[\"slash\"] = 47] = \"slash\";\n    CharacterCodes[CharacterCodes[\"formFeed\"] = 12] = \"formFeed\";\n    CharacterCodes[CharacterCodes[\"tab\"] = 9] = \"tab\";\n})(CharacterCodes || (CharacterCodes = {}));\n","export const cachedSpaces = new Array(20).fill(0).map((_, index) => {\n    return ' '.repeat(index);\n});\nconst maxCachedValues = 200;\nexport const cachedBreakLinesWithSpaces = {\n    ' ': {\n        '\\n': new Array(maxCachedValues).fill(0).map((_, index) => {\n            return '\\n' + ' '.repeat(index);\n        }),\n        '\\r': new Array(maxCachedValues).fill(0).map((_, index) => {\n            return '\\r' + ' '.repeat(index);\n        }),\n        '\\r\\n': new Array(maxCachedValues).fill(0).map((_, index) => {\n            return '\\r\\n' + ' '.repeat(index);\n        }),\n    },\n    '\\t': {\n        '\\n': new Array(maxCachedValues).fill(0).map((_, index) => {\n            return '\\n' + '\\t'.repeat(index);\n        }),\n        '\\r': new Array(maxCachedValues).fill(0).map((_, index) => {\n            return '\\r' + '\\t'.repeat(index);\n        }),\n        '\\r\\n': new Array(maxCachedValues).fill(0).map((_, index) => {\n            return '\\r\\n' + '\\t'.repeat(index);\n        }),\n    }\n};\nexport const supportedEols = ['\\n', '\\r', '\\r\\n'];\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner';\nimport { cachedSpaces, cachedBreakLinesWithSpaces, supportedEols } from './string-intern';\nexport function format(documentText, range, options) {\n    let initialIndentLevel;\n    let formatText;\n    let formatTextStart;\n    let rangeStart;\n    let rangeEnd;\n    if (range) {\n        rangeStart = range.offset;\n        rangeEnd = rangeStart + range.length;\n        formatTextStart = rangeStart;\n        while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n            formatTextStart--;\n        }\n        let endOffset = rangeEnd;\n        while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n            endOffset++;\n        }\n        formatText = documentText.substring(formatTextStart, endOffset);\n        initialIndentLevel = computeIndentLevel(formatText, options);\n    }\n    else {\n        formatText = documentText;\n        initialIndentLevel = 0;\n        formatTextStart = 0;\n        rangeStart = 0;\n        rangeEnd = documentText.length;\n    }\n    const eol = getEOL(options, documentText);\n    const eolFastPathSupported = supportedEols.includes(eol);\n    let numberLineBreaks = 0;\n    let indentLevel = 0;\n    let indentValue;\n    if (options.insertSpaces) {\n        indentValue = cachedSpaces[options.tabSize || 4] ?? repeat(cachedSpaces[1], options.tabSize || 4);\n    }\n    else {\n        indentValue = '\\t';\n    }\n    const indentType = indentValue === '\\t' ? '\\t' : ' ';\n    let scanner = createScanner(formatText, false);\n    let hasError = false;\n    function newLinesAndIndent() {\n        if (numberLineBreaks > 1) {\n            return repeat(eol, numberLineBreaks) + repeat(indentValue, initialIndentLevel + indentLevel);\n        }\n        const amountOfSpaces = indentValue.length * (initialIndentLevel + indentLevel);\n        if (!eolFastPathSupported || amountOfSpaces > cachedBreakLinesWithSpaces[indentType][eol].length) {\n            return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n        }\n        if (amountOfSpaces <= 0) {\n            return eol;\n        }\n        return cachedBreakLinesWithSpaces[indentType][eol][amountOfSpaces];\n    }\n    function scanNext() {\n        let token = scanner.scan();\n        numberLineBreaks = 0;\n        while (token === 15 /* SyntaxKind.Trivia */ || token === 14 /* SyntaxKind.LineBreakTrivia */) {\n            if (token === 14 /* SyntaxKind.LineBreakTrivia */ && options.keepLines) {\n                numberLineBreaks += 1;\n            }\n            else if (token === 14 /* SyntaxKind.LineBreakTrivia */) {\n                numberLineBreaks = 1;\n            }\n            token = scanner.scan();\n        }\n        hasError = token === 16 /* SyntaxKind.Unknown */ || scanner.getTokenError() !== 0 /* ScanError.None */;\n        return token;\n    }\n    const editOperations = [];\n    function addEdit(text, startOffset, endOffset) {\n        if (!hasError && (!range || (startOffset < rangeEnd && endOffset > rangeStart)) && documentText.substring(startOffset, endOffset) !== text) {\n            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n        }\n    }\n    let firstToken = scanNext();\n    if (options.keepLines && numberLineBreaks > 0) {\n        addEdit(repeat(eol, numberLineBreaks), 0, 0);\n    }\n    if (firstToken !== 17 /* SyntaxKind.EOF */) {\n        let firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n        let initialIndent = (indentValue.length * initialIndentLevel < 20) && options.insertSpaces\n            ? cachedSpaces[indentValue.length * initialIndentLevel]\n            : repeat(indentValue, initialIndentLevel);\n        addEdit(initialIndent, formatTextStart, firstTokenStart);\n    }\n    while (firstToken !== 17 /* SyntaxKind.EOF */) {\n        let firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n        let secondToken = scanNext();\n        let replaceContent = '';\n        let needsLineBreak = false;\n        while (numberLineBreaks === 0 && (secondToken === 12 /* SyntaxKind.LineCommentTrivia */ || secondToken === 13 /* SyntaxKind.BlockCommentTrivia */)) {\n            let commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n            addEdit(cachedSpaces[1], firstTokenEnd, commentTokenStart);\n            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n            needsLineBreak = secondToken === 12 /* SyntaxKind.LineCommentTrivia */;\n            replaceContent = needsLineBreak ? newLinesAndIndent() : '';\n            secondToken = scanNext();\n        }\n        if (secondToken === 2 /* SyntaxKind.CloseBraceToken */) {\n            if (firstToken !== 1 /* SyntaxKind.OpenBraceToken */) {\n                indentLevel--;\n            }\n            ;\n            if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 1 /* SyntaxKind.OpenBraceToken */) {\n                replaceContent = newLinesAndIndent();\n            }\n            else if (options.keepLines) {\n                replaceContent = cachedSpaces[1];\n            }\n        }\n        else if (secondToken === 4 /* SyntaxKind.CloseBracketToken */) {\n            if (firstToken !== 3 /* SyntaxKind.OpenBracketToken */) {\n                indentLevel--;\n            }\n            ;\n            if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 3 /* SyntaxKind.OpenBracketToken */) {\n                replaceContent = newLinesAndIndent();\n            }\n            else if (options.keepLines) {\n                replaceContent = cachedSpaces[1];\n            }\n        }\n        else {\n            switch (firstToken) {\n                case 3 /* SyntaxKind.OpenBracketToken */:\n                case 1 /* SyntaxKind.OpenBraceToken */:\n                    indentLevel++;\n                    if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else {\n                        replaceContent = cachedSpaces[1];\n                    }\n                    break;\n                case 5 /* SyntaxKind.CommaToken */:\n                    if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else {\n                        replaceContent = cachedSpaces[1];\n                    }\n                    break;\n                case 12 /* SyntaxKind.LineCommentTrivia */:\n                    replaceContent = newLinesAndIndent();\n                    break;\n                case 13 /* SyntaxKind.BlockCommentTrivia */:\n                    if (numberLineBreaks > 0) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else if (!needsLineBreak) {\n                        replaceContent = cachedSpaces[1];\n                    }\n                    break;\n                case 6 /* SyntaxKind.ColonToken */:\n                    if (options.keepLines && numberLineBreaks > 0) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else if (!needsLineBreak) {\n                        replaceContent = cachedSpaces[1];\n                    }\n                    break;\n                case 10 /* SyntaxKind.StringLiteral */:\n                    if (options.keepLines && numberLineBreaks > 0) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else if (secondToken === 6 /* SyntaxKind.ColonToken */ && !needsLineBreak) {\n                        replaceContent = '';\n                    }\n                    break;\n                case 7 /* SyntaxKind.NullKeyword */:\n                case 8 /* SyntaxKind.TrueKeyword */:\n                case 9 /* SyntaxKind.FalseKeyword */:\n                case 11 /* SyntaxKind.NumericLiteral */:\n                case 2 /* SyntaxKind.CloseBraceToken */:\n                case 4 /* SyntaxKind.CloseBracketToken */:\n                    if (options.keepLines && numberLineBreaks > 0) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else {\n                        if ((secondToken === 12 /* SyntaxKind.LineCommentTrivia */ || secondToken === 13 /* SyntaxKind.BlockCommentTrivia */) && !needsLineBreak) {\n                            replaceContent = cachedSpaces[1];\n                        }\n                        else if (secondToken !== 5 /* SyntaxKind.CommaToken */ && secondToken !== 17 /* SyntaxKind.EOF */) {\n                            hasError = true;\n                        }\n                    }\n                    break;\n                case 16 /* SyntaxKind.Unknown */:\n                    hasError = true;\n                    break;\n            }\n            if (numberLineBreaks > 0 && (secondToken === 12 /* SyntaxKind.LineCommentTrivia */ || secondToken === 13 /* SyntaxKind.BlockCommentTrivia */)) {\n                replaceContent = newLinesAndIndent();\n            }\n        }\n        if (secondToken === 17 /* SyntaxKind.EOF */) {\n            if (options.keepLines && numberLineBreaks > 0) {\n                replaceContent = newLinesAndIndent();\n            }\n            else {\n                replaceContent = options.insertFinalNewline ? eol : '';\n            }\n        }\n        const secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n        addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n        firstToken = secondToken;\n    }\n    return editOperations;\n}\nfunction repeat(s, count) {\n    let result = '';\n    for (let i = 0; i < count; i++) {\n        result += s;\n    }\n    return result;\n}\nfunction computeIndentLevel(content, options) {\n    let i = 0;\n    let nChars = 0;\n    const tabSize = options.tabSize || 4;\n    while (i < content.length) {\n        let ch = content.charAt(i);\n        if (ch === cachedSpaces[1]) {\n            nChars++;\n        }\n        else if (ch === '\\t') {\n            nChars += tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n    for (let i = 0; i < text.length; i++) {\n        const ch = text.charAt(i);\n        if (ch === '\\r') {\n            if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                return '\\r\\n';\n            }\n            return '\\r';\n        }\n        else if (ch === '\\n') {\n            return '\\n';\n        }\n    }\n    return (options && options.eol) || '\\n';\n}\nexport function isEOL(text, offset) {\n    return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner';\nvar ParseOptions;\n(function (ParseOptions) {\n    ParseOptions.DEFAULT = {\n        allowTrailingComma: false\n    };\n})(ParseOptions || (ParseOptions = {}));\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport function getLocation(text, position) {\n    const segments = []; // strings or numbers\n    const earlyReturnException = new Object();\n    let previousNode = undefined;\n    const previousNodeInst = {\n        value: {},\n        offset: 0,\n        length: 0,\n        type: 'object',\n        parent: undefined\n    };\n    let isAtPropertyKey = false;\n    function setPreviousNode(value, offset, length, type) {\n        previousNodeInst.value = value;\n        previousNodeInst.offset = offset;\n        previousNodeInst.length = length;\n        previousNodeInst.type = type;\n        previousNodeInst.colonOffset = undefined;\n        previousNode = previousNodeInst;\n    }\n    try {\n        visit(text, {\n            onObjectBegin: (offset, length) => {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = undefined;\n                isAtPropertyKey = position > offset;\n                segments.push(''); // push a placeholder (will be replaced)\n            },\n            onObjectProperty: (name, offset, length) => {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(name, offset, length, 'property');\n                segments[segments.length - 1] = name;\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onObjectEnd: (offset, length) => {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = undefined;\n                segments.pop();\n            },\n            onArrayBegin: (offset, length) => {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = undefined;\n                segments.push(0);\n            },\n            onArrayEnd: (offset, length) => {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = undefined;\n                segments.pop();\n            },\n            onLiteralValue: (value, offset, length) => {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(value, offset, length, getNodeType(value));\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onSeparator: (sep, offset, length) => {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                if (sep === ':' && previousNode && previousNode.type === 'property') {\n                    previousNode.colonOffset = offset;\n                    isAtPropertyKey = false;\n                    previousNode = undefined;\n                }\n                else if (sep === ',') {\n                    const last = segments[segments.length - 1];\n                    if (typeof last === 'number') {\n                        segments[segments.length - 1] = last + 1;\n                    }\n                    else {\n                        isAtPropertyKey = true;\n                        segments[segments.length - 1] = '';\n                    }\n                    previousNode = undefined;\n                }\n            }\n        });\n    }\n    catch (e) {\n        if (e !== earlyReturnException) {\n            throw e;\n        }\n    }\n    return {\n        path: segments,\n        previousNode,\n        isAtPropertyKey,\n        matches: (pattern) => {\n            let k = 0;\n            for (let i = 0; k < pattern.length && i < segments.length; i++) {\n                if (pattern[k] === segments[i] || pattern[k] === '*') {\n                    k++;\n                }\n                else if (pattern[k] !== '**') {\n                    return false;\n                }\n            }\n            return k === pattern.length;\n        }\n    };\n}\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport function parse(text, errors = [], options = ParseOptions.DEFAULT) {\n    let currentProperty = null;\n    let currentParent = [];\n    const previousParents = [];\n    function onValue(value) {\n        if (Array.isArray(currentParent)) {\n            currentParent.push(value);\n        }\n        else if (currentProperty !== null) {\n            currentParent[currentProperty] = value;\n        }\n    }\n    const visitor = {\n        onObjectBegin: () => {\n            const object = {};\n            onValue(object);\n            previousParents.push(currentParent);\n            currentParent = object;\n            currentProperty = null;\n        },\n        onObjectProperty: (name) => {\n            currentProperty = name;\n        },\n        onObjectEnd: () => {\n            currentParent = previousParents.pop();\n        },\n        onArrayBegin: () => {\n            const array = [];\n            onValue(array);\n            previousParents.push(currentParent);\n            currentParent = array;\n            currentProperty = null;\n        },\n        onArrayEnd: () => {\n            currentParent = previousParents.pop();\n        },\n        onLiteralValue: onValue,\n        onError: (error, offset, length) => {\n            errors.push({ error, offset, length });\n        }\n    };\n    visit(text, visitor, options);\n    return currentParent[0];\n}\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport function parseTree(text, errors = [], options = ParseOptions.DEFAULT) {\n    let currentParent = { type: 'array', offset: -1, length: -1, children: [], parent: undefined }; // artificial root\n    function ensurePropertyComplete(endOffset) {\n        if (currentParent.type === 'property') {\n            currentParent.length = endOffset - currentParent.offset;\n            currentParent = currentParent.parent;\n        }\n    }\n    function onValue(valueNode) {\n        currentParent.children.push(valueNode);\n        return valueNode;\n    }\n    const visitor = {\n        onObjectBegin: (offset) => {\n            currentParent = onValue({ type: 'object', offset, length: -1, parent: currentParent, children: [] });\n        },\n        onObjectProperty: (name, offset, length) => {\n            currentParent = onValue({ type: 'property', offset, length: -1, parent: currentParent, children: [] });\n            currentParent.children.push({ type: 'string', value: name, offset, length, parent: currentParent });\n        },\n        onObjectEnd: (offset, length) => {\n            ensurePropertyComplete(offset + length); // in case of a missing value for a property: make sure property is complete\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onArrayBegin: (offset, length) => {\n            currentParent = onValue({ type: 'array', offset, length: -1, parent: currentParent, children: [] });\n        },\n        onArrayEnd: (offset, length) => {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onLiteralValue: (value, offset, length) => {\n            onValue({ type: getNodeType(value), offset, length, parent: currentParent, value });\n            ensurePropertyComplete(offset + length);\n        },\n        onSeparator: (sep, offset, length) => {\n            if (currentParent.type === 'property') {\n                if (sep === ':') {\n                    currentParent.colonOffset = offset;\n                }\n                else if (sep === ',') {\n                    ensurePropertyComplete(offset);\n                }\n            }\n        },\n        onError: (error, offset, length) => {\n            errors.push({ error, offset, length });\n        }\n    };\n    visit(text, visitor, options);\n    const result = currentParent.children[0];\n    if (result) {\n        delete result.parent;\n    }\n    return result;\n}\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport function findNodeAtLocation(root, path) {\n    if (!root) {\n        return undefined;\n    }\n    let node = root;\n    for (let segment of path) {\n        if (typeof segment === 'string') {\n            if (node.type !== 'object' || !Array.isArray(node.children)) {\n                return undefined;\n            }\n            let found = false;\n            for (const propertyNode of node.children) {\n                if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment && propertyNode.children.length === 2) {\n                    node = propertyNode.children[1];\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return undefined;\n            }\n        }\n        else {\n            const index = segment;\n            if (node.type !== 'array' || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {\n                return undefined;\n            }\n            node = node.children[index];\n        }\n    }\n    return node;\n}\n/**\n * Gets the JSON path of the given JSON DOM node\n */\nexport function getNodePath(node) {\n    if (!node.parent || !node.parent.children) {\n        return [];\n    }\n    const path = getNodePath(node.parent);\n    if (node.parent.type === 'property') {\n        const key = node.parent.children[0].value;\n        path.push(key);\n    }\n    else if (node.parent.type === 'array') {\n        const index = node.parent.children.indexOf(node);\n        if (index !== -1) {\n            path.push(index);\n        }\n    }\n    return path;\n}\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport function getNodeValue(node) {\n    switch (node.type) {\n        case 'array':\n            return node.children.map(getNodeValue);\n        case 'object':\n            const obj = Object.create(null);\n            for (let prop of node.children) {\n                const valueNode = prop.children[1];\n                if (valueNode) {\n                    obj[prop.children[0].value] = getNodeValue(valueNode);\n                }\n            }\n            return obj;\n        case 'null':\n        case 'string':\n        case 'number':\n        case 'boolean':\n            return node.value;\n        default:\n            return undefined;\n    }\n}\nexport function contains(node, offset, includeRightBound = false) {\n    return (offset >= node.offset && offset < (node.offset + node.length)) || includeRightBound && (offset === (node.offset + node.length));\n}\n/**\n * Finds the most inner node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\nexport function findNodeAtOffset(node, offset, includeRightBound = false) {\n    if (contains(node, offset, includeRightBound)) {\n        const children = node.children;\n        if (Array.isArray(children)) {\n            for (let i = 0; i < children.length && children[i].offset <= offset; i++) {\n                const item = findNodeAtOffset(children[i], offset, includeRightBound);\n                if (item) {\n                    return item;\n                }\n            }\n        }\n        return node;\n    }\n    return undefined;\n}\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport function visit(text, visitor, options = ParseOptions.DEFAULT) {\n    const _scanner = createScanner(text, false);\n    // Important: Only pass copies of this to visitor functions to prevent accidental modification, and\n    // to not affect visitor functions which stored a reference to a previous JSONPath\n    const _jsonPath = [];\n    // Depth of onXXXBegin() callbacks suppressed. onXXXEnd() decrements this if it isn't 0 already.\n    // Callbacks are only called when this value is 0.\n    let suppressedCallbacks = 0;\n    function toNoArgVisit(visitFunction) {\n        return visitFunction ? () => suppressedCallbacks === 0 && visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : () => true;\n    }\n    function toOneArgVisit(visitFunction) {\n        return visitFunction ? (arg) => suppressedCallbacks === 0 && visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : () => true;\n    }\n    function toOneArgVisitWithPath(visitFunction) {\n        return visitFunction ? (arg) => suppressedCallbacks === 0 && visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), () => _jsonPath.slice()) : () => true;\n    }\n    function toBeginVisit(visitFunction) {\n        return visitFunction ?\n            () => {\n                if (suppressedCallbacks > 0) {\n                    suppressedCallbacks++;\n                }\n                else {\n                    let cbReturn = visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), () => _jsonPath.slice());\n                    if (cbReturn === false) {\n                        suppressedCallbacks = 1;\n                    }\n                }\n            }\n            : () => true;\n    }\n    function toEndVisit(visitFunction) {\n        return visitFunction ?\n            () => {\n                if (suppressedCallbacks > 0) {\n                    suppressedCallbacks--;\n                }\n                if (suppressedCallbacks === 0) {\n                    visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter());\n                }\n            }\n            : () => true;\n    }\n    const onObjectBegin = toBeginVisit(visitor.onObjectBegin), onObjectProperty = toOneArgVisitWithPath(visitor.onObjectProperty), onObjectEnd = toEndVisit(visitor.onObjectEnd), onArrayBegin = toBeginVisit(visitor.onArrayBegin), onArrayEnd = toEndVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisitWithPath(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);\n    const disallowComments = options && options.disallowComments;\n    const allowTrailingComma = options && options.allowTrailingComma;\n    function scanNext() {\n        while (true) {\n            const token = _scanner.scan();\n            switch (_scanner.getTokenError()) {\n                case 4 /* ScanError.InvalidUnicode */:\n                    handleError(14 /* ParseErrorCode.InvalidUnicode */);\n                    break;\n                case 5 /* ScanError.InvalidEscapeCharacter */:\n                    handleError(15 /* ParseErrorCode.InvalidEscapeCharacter */);\n                    break;\n                case 3 /* ScanError.UnexpectedEndOfNumber */:\n                    handleError(13 /* ParseErrorCode.UnexpectedEndOfNumber */);\n                    break;\n                case 1 /* ScanError.UnexpectedEndOfComment */:\n                    if (!disallowComments) {\n                        handleError(11 /* ParseErrorCode.UnexpectedEndOfComment */);\n                    }\n                    break;\n                case 2 /* ScanError.UnexpectedEndOfString */:\n                    handleError(12 /* ParseErrorCode.UnexpectedEndOfString */);\n                    break;\n                case 6 /* ScanError.InvalidCharacter */:\n                    handleError(16 /* ParseErrorCode.InvalidCharacter */);\n                    break;\n            }\n            switch (token) {\n                case 12 /* SyntaxKind.LineCommentTrivia */:\n                case 13 /* SyntaxKind.BlockCommentTrivia */:\n                    if (disallowComments) {\n                        handleError(10 /* ParseErrorCode.InvalidCommentToken */);\n                    }\n                    else {\n                        onComment();\n                    }\n                    break;\n                case 16 /* SyntaxKind.Unknown */:\n                    handleError(1 /* ParseErrorCode.InvalidSymbol */);\n                    break;\n                case 15 /* SyntaxKind.Trivia */:\n                case 14 /* SyntaxKind.LineBreakTrivia */:\n                    break;\n                default:\n                    return token;\n            }\n        }\n    }\n    function handleError(error, skipUntilAfter = [], skipUntil = []) {\n        onError(error);\n        if (skipUntilAfter.length + skipUntil.length > 0) {\n            let token = _scanner.getToken();\n            while (token !== 17 /* SyntaxKind.EOF */) {\n                if (skipUntilAfter.indexOf(token) !== -1) {\n                    scanNext();\n                    break;\n                }\n                else if (skipUntil.indexOf(token) !== -1) {\n                    break;\n                }\n                token = scanNext();\n            }\n        }\n    }\n    function parseString(isValue) {\n        const value = _scanner.getTokenValue();\n        if (isValue) {\n            onLiteralValue(value);\n        }\n        else {\n            onObjectProperty(value);\n            // add property name afterwards\n            _jsonPath.push(value);\n        }\n        scanNext();\n        return true;\n    }\n    function parseLiteral() {\n        switch (_scanner.getToken()) {\n            case 11 /* SyntaxKind.NumericLiteral */:\n                const tokenValue = _scanner.getTokenValue();\n                let value = Number(tokenValue);\n                if (isNaN(value)) {\n                    handleError(2 /* ParseErrorCode.InvalidNumberFormat */);\n                    value = 0;\n                }\n                onLiteralValue(value);\n                break;\n            case 7 /* SyntaxKind.NullKeyword */:\n                onLiteralValue(null);\n                break;\n            case 8 /* SyntaxKind.TrueKeyword */:\n                onLiteralValue(true);\n                break;\n            case 9 /* SyntaxKind.FalseKeyword */:\n                onLiteralValue(false);\n                break;\n            default:\n                return false;\n        }\n        scanNext();\n        return true;\n    }\n    function parseProperty() {\n        if (_scanner.getToken() !== 10 /* SyntaxKind.StringLiteral */) {\n            handleError(3 /* ParseErrorCode.PropertyNameExpected */, [], [2 /* SyntaxKind.CloseBraceToken */, 5 /* SyntaxKind.CommaToken */]);\n            return false;\n        }\n        parseString(false);\n        if (_scanner.getToken() === 6 /* SyntaxKind.ColonToken */) {\n            onSeparator(':');\n            scanNext(); // consume colon\n            if (!parseValue()) {\n                handleError(4 /* ParseErrorCode.ValueExpected */, [], [2 /* SyntaxKind.CloseBraceToken */, 5 /* SyntaxKind.CommaToken */]);\n            }\n        }\n        else {\n            handleError(5 /* ParseErrorCode.ColonExpected */, [], [2 /* SyntaxKind.CloseBraceToken */, 5 /* SyntaxKind.CommaToken */]);\n        }\n        _jsonPath.pop(); // remove processed property name\n        return true;\n    }\n    function parseObject() {\n        onObjectBegin();\n        scanNext(); // consume open brace\n        let needsComma = false;\n        while (_scanner.getToken() !== 2 /* SyntaxKind.CloseBraceToken */ && _scanner.getToken() !== 17 /* SyntaxKind.EOF */) {\n            if (_scanner.getToken() === 5 /* SyntaxKind.CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ParseErrorCode.ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 2 /* SyntaxKind.CloseBraceToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* ParseErrorCode.CommaExpected */, [], []);\n            }\n            if (!parseProperty()) {\n                handleError(4 /* ParseErrorCode.ValueExpected */, [], [2 /* SyntaxKind.CloseBraceToken */, 5 /* SyntaxKind.CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onObjectEnd();\n        if (_scanner.getToken() !== 2 /* SyntaxKind.CloseBraceToken */) {\n            handleError(7 /* ParseErrorCode.CloseBraceExpected */, [2 /* SyntaxKind.CloseBraceToken */], []);\n        }\n        else {\n            scanNext(); // consume close brace\n        }\n        return true;\n    }\n    function parseArray() {\n        onArrayBegin();\n        scanNext(); // consume open bracket\n        let isFirstElement = true;\n        let needsComma = false;\n        while (_scanner.getToken() !== 4 /* SyntaxKind.CloseBracketToken */ && _scanner.getToken() !== 17 /* SyntaxKind.EOF */) {\n            if (_scanner.getToken() === 5 /* SyntaxKind.CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ParseErrorCode.ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 4 /* SyntaxKind.CloseBracketToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* ParseErrorCode.CommaExpected */, [], []);\n            }\n            if (isFirstElement) {\n                _jsonPath.push(0);\n                isFirstElement = false;\n            }\n            else {\n                _jsonPath[_jsonPath.length - 1]++;\n            }\n            if (!parseValue()) {\n                handleError(4 /* ParseErrorCode.ValueExpected */, [], [4 /* SyntaxKind.CloseBracketToken */, 5 /* SyntaxKind.CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onArrayEnd();\n        if (!isFirstElement) {\n            _jsonPath.pop(); // remove array index\n        }\n        if (_scanner.getToken() !== 4 /* SyntaxKind.CloseBracketToken */) {\n            handleError(8 /* ParseErrorCode.CloseBracketExpected */, [4 /* SyntaxKind.CloseBracketToken */], []);\n        }\n        else {\n            scanNext(); // consume close bracket\n        }\n        return true;\n    }\n    function parseValue() {\n        switch (_scanner.getToken()) {\n            case 3 /* SyntaxKind.OpenBracketToken */:\n                return parseArray();\n            case 1 /* SyntaxKind.OpenBraceToken */:\n                return parseObject();\n            case 10 /* SyntaxKind.StringLiteral */:\n                return parseString(true);\n            default:\n                return parseLiteral();\n        }\n    }\n    scanNext();\n    if (_scanner.getToken() === 17 /* SyntaxKind.EOF */) {\n        if (options.allowEmptyContent) {\n            return true;\n        }\n        handleError(4 /* ParseErrorCode.ValueExpected */, [], []);\n        return false;\n    }\n    if (!parseValue()) {\n        handleError(4 /* ParseErrorCode.ValueExpected */, [], []);\n        return false;\n    }\n    if (_scanner.getToken() !== 17 /* SyntaxKind.EOF */) {\n        handleError(9 /* ParseErrorCode.EndOfFileExpected */, [], []);\n    }\n    return true;\n}\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport function stripComments(text, replaceCh) {\n    let _scanner = createScanner(text), parts = [], kind, offset = 0, pos;\n    do {\n        pos = _scanner.getPosition();\n        kind = _scanner.scan();\n        switch (kind) {\n            case 12 /* SyntaxKind.LineCommentTrivia */:\n            case 13 /* SyntaxKind.BlockCommentTrivia */:\n            case 17 /* SyntaxKind.EOF */:\n                if (offset !== pos) {\n                    parts.push(text.substring(offset, pos));\n                }\n                if (replaceCh !== undefined) {\n                    parts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n                }\n                offset = _scanner.getPosition();\n                break;\n        }\n    } while (kind !== 17 /* SyntaxKind.EOF */);\n    return parts.join('');\n}\nexport function getNodeType(value) {\n    switch (typeof value) {\n        case 'boolean': return 'boolean';\n        case 'number': return 'number';\n        case 'string': return 'string';\n        case 'object': {\n            if (!value) {\n                return 'null';\n            }\n            else if (Array.isArray(value)) {\n                return 'array';\n            }\n            return 'object';\n        }\n        default: return 'null';\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { format, isEOL } from './format';\nimport { parseTree, findNodeAtLocation } from './parser';\nexport function removeProperty(text, path, options) {\n    return setProperty(text, path, void 0, options);\n}\nexport function setProperty(text, originalPath, value, options) {\n    const path = originalPath.slice();\n    const errors = [];\n    const root = parseTree(text, errors);\n    let parent = void 0;\n    let lastSegment = void 0;\n    while (path.length > 0) {\n        lastSegment = path.pop();\n        parent = findNodeAtLocation(root, path);\n        if (parent === void 0 && value !== void 0) {\n            if (typeof lastSegment === 'string') {\n                value = { [lastSegment]: value };\n            }\n            else {\n                value = [value];\n            }\n        }\n        else {\n            break;\n        }\n    }\n    if (!parent) {\n        // empty document\n        if (value === void 0) { // delete\n            throw new Error('Can not delete in empty document');\n        }\n        return withFormatting(text, { offset: root ? root.offset : 0, length: root ? root.length : 0, content: JSON.stringify(value) }, options);\n    }\n    else if (parent.type === 'object' && typeof lastSegment === 'string' && Array.isArray(parent.children)) {\n        const existing = findNodeAtLocation(parent, [lastSegment]);\n        if (existing !== void 0) {\n            if (value === void 0) { // delete\n                if (!existing.parent) {\n                    throw new Error('Malformed AST');\n                }\n                const propertyIndex = parent.children.indexOf(existing.parent);\n                let removeBegin;\n                let removeEnd = existing.parent.offset + existing.parent.length;\n                if (propertyIndex > 0) {\n                    // remove the comma of the previous node\n                    let previous = parent.children[propertyIndex - 1];\n                    removeBegin = previous.offset + previous.length;\n                }\n                else {\n                    removeBegin = parent.offset + 1;\n                    if (parent.children.length > 1) {\n                        // remove the comma of the next node\n                        let next = parent.children[1];\n                        removeEnd = next.offset;\n                    }\n                }\n                return withFormatting(text, { offset: removeBegin, length: removeEnd - removeBegin, content: '' }, options);\n            }\n            else {\n                // set value of existing property\n                return withFormatting(text, { offset: existing.offset, length: existing.length, content: JSON.stringify(value) }, options);\n            }\n        }\n        else {\n            if (value === void 0) { // delete\n                return []; // property does not exist, nothing to do\n            }\n            const newProperty = `${JSON.stringify(lastSegment)}: ${JSON.stringify(value)}`;\n            const index = options.getInsertionIndex ? options.getInsertionIndex(parent.children.map(p => p.children[0].value)) : parent.children.length;\n            let edit;\n            if (index > 0) {\n                let previous = parent.children[index - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            else if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty + ',' };\n            }\n            return withFormatting(text, edit, options);\n        }\n    }\n    else if (parent.type === 'array' && typeof lastSegment === 'number' && Array.isArray(parent.children)) {\n        const insertIndex = lastSegment;\n        if (insertIndex === -1) {\n            // Insert\n            const newProperty = `${JSON.stringify(value)}`;\n            let edit;\n            if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                const previous = parent.children[parent.children.length - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            return withFormatting(text, edit, options);\n        }\n        else if (value === void 0 && parent.children.length >= 0) {\n            // Removal\n            const removalIndex = lastSegment;\n            const toRemove = parent.children[removalIndex];\n            let edit;\n            if (parent.children.length === 1) {\n                // only item\n                edit = { offset: parent.offset + 1, length: parent.length - 2, content: '' };\n            }\n            else if (parent.children.length - 1 === removalIndex) {\n                // last item\n                let previous = parent.children[removalIndex - 1];\n                let offset = previous.offset + previous.length;\n                let parentEndOffset = parent.offset + parent.length;\n                edit = { offset, length: parentEndOffset - 2 - offset, content: '' };\n            }\n            else {\n                edit = { offset: toRemove.offset, length: parent.children[removalIndex + 1].offset - toRemove.offset, content: '' };\n            }\n            return withFormatting(text, edit, options);\n        }\n        else if (value !== void 0) {\n            let edit;\n            const newProperty = `${JSON.stringify(value)}`;\n            if (!options.isArrayInsertion && parent.children.length > lastSegment) {\n                const toModify = parent.children[lastSegment];\n                edit = { offset: toModify.offset, length: toModify.length, content: newProperty };\n            }\n            else if (parent.children.length === 0 || lastSegment === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: parent.children.length === 0 ? newProperty : newProperty + ',' };\n            }\n            else {\n                const index = lastSegment > parent.children.length ? parent.children.length : lastSegment;\n                const previous = parent.children[index - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            return withFormatting(text, edit, options);\n        }\n        else {\n            throw new Error(`Can not ${value === void 0 ? 'remove' : (options.isArrayInsertion ? 'insert' : 'modify')} Array index ${insertIndex} as length is not sufficient`);\n        }\n    }\n    else {\n        throw new Error(`Can not add ${typeof lastSegment !== 'number' ? 'index' : 'property'} to parent of type ${parent.type}`);\n    }\n}\nfunction withFormatting(text, edit, options) {\n    if (!options.formattingOptions) {\n        return [edit];\n    }\n    // apply the edit\n    let newText = applyEdit(text, edit);\n    // format the new text\n    let begin = edit.offset;\n    let end = edit.offset + edit.content.length;\n    if (edit.length === 0 || edit.content.length === 0) { // insert or remove\n        while (begin > 0 && !isEOL(newText, begin - 1)) {\n            begin--;\n        }\n        while (end < newText.length && !isEOL(newText, end)) {\n            end++;\n        }\n    }\n    const edits = format(newText, { offset: begin, length: end - begin }, { ...options.formattingOptions, keepLines: false });\n    // apply the formatting edits and track the begin and end offsets of the changes\n    for (let i = edits.length - 1; i >= 0; i--) {\n        const edit = edits[i];\n        newText = applyEdit(newText, edit);\n        begin = Math.min(begin, edit.offset);\n        end = Math.max(end, edit.offset + edit.length);\n        end += edit.content.length - edit.length;\n    }\n    // create a single edit with all changes\n    const editLength = text.length - (newText.length - end) - begin;\n    return [{ offset: begin, length: editLength, content: newText.substring(begin, end) }];\n}\nexport function applyEdit(text, edit) {\n    return text.substring(0, edit.offset) + edit.content + text.substring(edit.offset + edit.length);\n}\nexport function isWS(text, offset) {\n    return '\\r\\n \\t'.indexOf(text.charAt(offset)) !== -1;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as formatter from './impl/format';\nimport * as edit from './impl/edit';\nimport * as scanner from './impl/scanner';\nimport * as parser from './impl/parser';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport const createScanner = scanner.createScanner;\nexport var ScanError;\n(function (ScanError) {\n    ScanError[ScanError[\"None\"] = 0] = \"None\";\n    ScanError[ScanError[\"UnexpectedEndOfComment\"] = 1] = \"UnexpectedEndOfComment\";\n    ScanError[ScanError[\"UnexpectedEndOfString\"] = 2] = \"UnexpectedEndOfString\";\n    ScanError[ScanError[\"UnexpectedEndOfNumber\"] = 3] = \"UnexpectedEndOfNumber\";\n    ScanError[ScanError[\"InvalidUnicode\"] = 4] = \"InvalidUnicode\";\n    ScanError[ScanError[\"InvalidEscapeCharacter\"] = 5] = \"InvalidEscapeCharacter\";\n    ScanError[ScanError[\"InvalidCharacter\"] = 6] = \"InvalidCharacter\";\n})(ScanError || (ScanError = {}));\nexport var SyntaxKind;\n(function (SyntaxKind) {\n    SyntaxKind[SyntaxKind[\"OpenBraceToken\"] = 1] = \"OpenBraceToken\";\n    SyntaxKind[SyntaxKind[\"CloseBraceToken\"] = 2] = \"CloseBraceToken\";\n    SyntaxKind[SyntaxKind[\"OpenBracketToken\"] = 3] = \"OpenBracketToken\";\n    SyntaxKind[SyntaxKind[\"CloseBracketToken\"] = 4] = \"CloseBracketToken\";\n    SyntaxKind[SyntaxKind[\"CommaToken\"] = 5] = \"CommaToken\";\n    SyntaxKind[SyntaxKind[\"ColonToken\"] = 6] = \"ColonToken\";\n    SyntaxKind[SyntaxKind[\"NullKeyword\"] = 7] = \"NullKeyword\";\n    SyntaxKind[SyntaxKind[\"TrueKeyword\"] = 8] = \"TrueKeyword\";\n    SyntaxKind[SyntaxKind[\"FalseKeyword\"] = 9] = \"FalseKeyword\";\n    SyntaxKind[SyntaxKind[\"StringLiteral\"] = 10] = \"StringLiteral\";\n    SyntaxKind[SyntaxKind[\"NumericLiteral\"] = 11] = \"NumericLiteral\";\n    SyntaxKind[SyntaxKind[\"LineCommentTrivia\"] = 12] = \"LineCommentTrivia\";\n    SyntaxKind[SyntaxKind[\"BlockCommentTrivia\"] = 13] = \"BlockCommentTrivia\";\n    SyntaxKind[SyntaxKind[\"LineBreakTrivia\"] = 14] = \"LineBreakTrivia\";\n    SyntaxKind[SyntaxKind[\"Trivia\"] = 15] = \"Trivia\";\n    SyntaxKind[SyntaxKind[\"Unknown\"] = 16] = \"Unknown\";\n    SyntaxKind[SyntaxKind[\"EOF\"] = 17] = \"EOF\";\n})(SyntaxKind || (SyntaxKind = {}));\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport const getLocation = parser.getLocation;\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore, always check the errors list to find out if the input was valid.\n */\nexport const parse = parser.parse;\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport const parseTree = parser.parseTree;\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport const findNodeAtLocation = parser.findNodeAtLocation;\n/**\n * Finds the innermost node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\nexport const findNodeAtOffset = parser.findNodeAtOffset;\n/**\n * Gets the JSON path of the given JSON DOM node\n */\nexport const getNodePath = parser.getNodePath;\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport const getNodeValue = parser.getNodeValue;\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport const visit = parser.visit;\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport const stripComments = parser.stripComments;\nexport var ParseErrorCode;\n(function (ParseErrorCode) {\n    ParseErrorCode[ParseErrorCode[\"InvalidSymbol\"] = 1] = \"InvalidSymbol\";\n    ParseErrorCode[ParseErrorCode[\"InvalidNumberFormat\"] = 2] = \"InvalidNumberFormat\";\n    ParseErrorCode[ParseErrorCode[\"PropertyNameExpected\"] = 3] = \"PropertyNameExpected\";\n    ParseErrorCode[ParseErrorCode[\"ValueExpected\"] = 4] = \"ValueExpected\";\n    ParseErrorCode[ParseErrorCode[\"ColonExpected\"] = 5] = \"ColonExpected\";\n    ParseErrorCode[ParseErrorCode[\"CommaExpected\"] = 6] = \"CommaExpected\";\n    ParseErrorCode[ParseErrorCode[\"CloseBraceExpected\"] = 7] = \"CloseBraceExpected\";\n    ParseErrorCode[ParseErrorCode[\"CloseBracketExpected\"] = 8] = \"CloseBracketExpected\";\n    ParseErrorCode[ParseErrorCode[\"EndOfFileExpected\"] = 9] = \"EndOfFileExpected\";\n    ParseErrorCode[ParseErrorCode[\"InvalidCommentToken\"] = 10] = \"InvalidCommentToken\";\n    ParseErrorCode[ParseErrorCode[\"UnexpectedEndOfComment\"] = 11] = \"UnexpectedEndOfComment\";\n    ParseErrorCode[ParseErrorCode[\"UnexpectedEndOfString\"] = 12] = \"UnexpectedEndOfString\";\n    ParseErrorCode[ParseErrorCode[\"UnexpectedEndOfNumber\"] = 13] = \"UnexpectedEndOfNumber\";\n    ParseErrorCode[ParseErrorCode[\"InvalidUnicode\"] = 14] = \"InvalidUnicode\";\n    ParseErrorCode[ParseErrorCode[\"InvalidEscapeCharacter\"] = 15] = \"InvalidEscapeCharacter\";\n    ParseErrorCode[ParseErrorCode[\"InvalidCharacter\"] = 16] = \"InvalidCharacter\";\n})(ParseErrorCode || (ParseErrorCode = {}));\nexport function printParseErrorCode(code) {\n    switch (code) {\n        case 1 /* ParseErrorCode.InvalidSymbol */: return 'InvalidSymbol';\n        case 2 /* ParseErrorCode.InvalidNumberFormat */: return 'InvalidNumberFormat';\n        case 3 /* ParseErrorCode.PropertyNameExpected */: return 'PropertyNameExpected';\n        case 4 /* ParseErrorCode.ValueExpected */: return 'ValueExpected';\n        case 5 /* ParseErrorCode.ColonExpected */: return 'ColonExpected';\n        case 6 /* ParseErrorCode.CommaExpected */: return 'CommaExpected';\n        case 7 /* ParseErrorCode.CloseBraceExpected */: return 'CloseBraceExpected';\n        case 8 /* ParseErrorCode.CloseBracketExpected */: return 'CloseBracketExpected';\n        case 9 /* ParseErrorCode.EndOfFileExpected */: return 'EndOfFileExpected';\n        case 10 /* ParseErrorCode.InvalidCommentToken */: return 'InvalidCommentToken';\n        case 11 /* ParseErrorCode.UnexpectedEndOfComment */: return 'UnexpectedEndOfComment';\n        case 12 /* ParseErrorCode.UnexpectedEndOfString */: return 'UnexpectedEndOfString';\n        case 13 /* ParseErrorCode.UnexpectedEndOfNumber */: return 'UnexpectedEndOfNumber';\n        case 14 /* ParseErrorCode.InvalidUnicode */: return 'InvalidUnicode';\n        case 15 /* ParseErrorCode.InvalidEscapeCharacter */: return 'InvalidEscapeCharacter';\n        case 16 /* ParseErrorCode.InvalidCharacter */: return 'InvalidCharacter';\n    }\n    return '<unknown ParseErrorCode>';\n}\n/**\n * Computes the edit operations needed to format a JSON document.\n *\n * @param documentText The input text\n * @param range The range to format or `undefined` to format the full content\n * @param options The formatting options\n * @returns The edit operations describing the formatting changes to the original document following the format described in {@linkcode EditResult}.\n * To apply the edit operations to the input, use {@linkcode applyEdits}.\n */\nexport function format(documentText, range, options) {\n    return formatter.format(documentText, range, options);\n}\n/**\n * Computes the edit operations needed to modify a value in the JSON document.\n *\n * @param documentText The input text\n * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n * If the path points to an non-existing property or item, it will be created.\n * @param value The new value for the specified property or item. If the value is undefined,\n * the property or item will be removed.\n * @param options Options\n * @returns The edit operations describing the changes to the original document, following the format described in {@linkcode EditResult}.\n * To apply the edit operations to the input, use {@linkcode applyEdits}.\n */\nexport function modify(text, path, value, options) {\n    return edit.setProperty(text, path, value, options);\n}\n/**\n * Applies edits to an input string.\n * @param text The input text\n * @param edits Edit operations following the format described in {@linkcode EditResult}.\n * @returns The text with the applied edits.\n * @throws An error if the edit operations are not well-formed as described in {@linkcode EditResult}.\n */\nexport function applyEdits(text, edits) {\n    let sortedEdits = edits.slice(0).sort((a, b) => {\n        const diff = a.offset - b.offset;\n        if (diff === 0) {\n            return a.length - b.length;\n        }\n        return diff;\n    });\n    let lastModifiedOffset = text.length;\n    for (let i = sortedEdits.length - 1; i >= 0; i--) {\n        let e = sortedEdits[i];\n        if (e.offset + e.length <= lastModifiedOffset) {\n            text = edit.applyEdit(text, e);\n        }\n        else {\n            throw new Error('Overlapping edit');\n        }\n        lastModifiedOffset = e.offset;\n    }\n    return text;\n}\n","// The module 'vscode' contains the VS Code extensibility API\r\n// Import the module and reference it with the alias vscode in your code below\r\nimport * as vscode from 'vscode';\r\nimport * as json from 'jsonc-parser';\r\n\r\n// This method is called when extension is activated\r\n// The extension is activated the very first time the command is executed\r\nexport function activate(context: vscode.ExtensionContext) {\r\n\r\n\tconst disposables = [\r\n\t\tvscode.commands.registerCommand('json-navigator.step-out', () => process(outOfNode)),\r\n\t\tvscode.commands.registerCommand('json-navigator.step-in', () => process(intoNode)),\r\n\t\tvscode.commands.registerCommand('json-navigator.step-next', () => process(nextNode)),\r\n\t\tvscode.commands.registerCommand('json-navigator.step-previous', () => process(previousNode))\r\n\t];\r\n\r\n\tdisposables.forEach(e => {\r\n\t\tcontext.subscriptions.push(e);\r\n\t});\r\n}\r\n\r\n// This method is called when your extension is deactivated\r\nexport function deactivate() {}\r\n\r\nexport function process(command: (editor : vscode.TextEditor, currentNode: json.Node) => vscode.Selection) {\r\n\tconst editor = vscode.window.activeTextEditor;\r\n\tif(editor === undefined) {\r\n\t\tvscode.window.showErrorMessage('editor is undefined');\r\n\t\treturn;\r\n\t}\r\n\tconst node = getCurrentNode(editor);\r\n\tif(node === undefined) {\r\n\t\r\n\t\tvscode.window.showErrorMessage('node is undefined');\r\n\t\treturn;\r\n\t}\r\n\tvscode.debug.activeDebugSession ? vscode.window.showWarningMessage(jsonNodeToString(node)) : \"\";\r\n\teditor.selection = command(editor, node);\r\n\teditor.revealRange(new vscode.Range(editor.selection.start, editor.selection.end));\t\r\n}\r\n\r\n\r\nexport function jsonNodeToString(node : json.Node) : string\r\n{\r\n\treturn JSON.stringify({\r\n\t\toffset: node.offset,\r\n\t\tvalue: node.value,\r\n\t\ttype: node.type,\r\n\t\tparentType: node.parent?.type ?? \"\",\r\n\t\tparentOffset: node.parent?.offset ?? \"\",\r\n\t\tchildren: node.children?.map( (n) => { return { type: node.type, offset: node.offset }; }) ?? \"\"\r\n\t});\r\n}\r\n\r\nexport function nextNode(editor : vscode.TextEditor, currentNode: json.Node) : vscode.Selection {\r\n\tif(currentNode.parent === undefined)\r\n\t{\r\n\t\treturn getSelectionOfNode(editor, currentNode); \r\n\t}\r\n\r\n\tif(currentNode.parent.type === 'property')\r\n\t{\r\n\t\tconst currentIndex = currentNode.parent.parent!.children!.indexOf(currentNode.parent) ;\r\n\t\tif(currentIndex <  currentNode.parent.parent!.children!.length - 1)\r\n\t\t{\r\n\t\t\treturn getSelectionOfNode(editor, currentNode.parent.parent!.children![currentIndex + 1]); \r\n\t\t}\r\n\t}\r\n\r\n\tif(currentNode.parent.type === 'object' || currentNode.parent.type === 'array')\r\n\t{\r\n\t\tconst currentIndex = currentNode.parent.children!.indexOf(currentNode);\r\n\t\tif(currentIndex <  currentNode.parent.children!.length - 1)\r\n\t\t{\r\n\t\t\treturn getSelectionOfNode(editor, currentNode.parent.children![currentIndex + 1]); \r\n\t\t}\r\n\t}\r\n\r\n\treturn getSelectionOfNode(editor, currentNode);\r\n}\r\n\r\nexport function previousNode(editor : vscode.TextEditor, currentNode: json.Node) : vscode.Selection {\r\n\tif(currentNode.parent === undefined)\r\n\t{\r\n\t\treturn getSelectionOfNode(editor, currentNode); \r\n\t}\r\n\r\n\tif(currentNode.parent.type === 'property')\r\n\t{\r\n\t\tconst currentIndex = currentNode.parent.parent!.children!.indexOf(currentNode.parent) ;\r\n\t\tif(currentIndex > 0)\r\n\t\t{\r\n\t\t\treturn getSelectionOfNode(editor, currentNode.parent.parent!.children![currentIndex - 1]); \r\n\t\t}\r\n\t}\r\n\r\n\tif(currentNode.parent.type === 'object' || currentNode.parent.type === 'array')\r\n\t{\r\n\t\tconst currentIndex = currentNode.parent.children!.indexOf(currentNode);\r\n\t\tif(currentIndex > 0)\r\n\t\t{\r\n\t\t\treturn getSelectionOfNode(editor, currentNode.parent.children![currentIndex - 1]); \r\n\t\t}\r\n\t}\r\n\r\n\treturn getSelectionOfNode(editor, currentNode);\r\n}\r\n\r\nexport function outOfNode(editor : vscode.TextEditor, currentNode: json.Node) : vscode.Selection {\r\n\tswitch (currentNode.type) {\r\n\t\tcase 'property':\r\n\t\t\treturn getSelectionOfNode(editor, currentNode.parent ?? currentNode);\r\n\t\tcase 'string':\r\n\t\t\tif(currentNode.parent === undefined) {\r\n\t\t\t\tvscode.window.showInformationMessage('No parent!?!?!?!?!?!');\r\n\t\t\t\treturn getSelectionOfNode(editor, currentNode);\r\n\t\t\t}\r\n\t\t\telse if(currentNode.parent.type === 'property' && currentNode.parent.children?.[0] === currentNode) {\r\n\t\t\t\t// The string is the key in a property. \r\n\t\t\t\treturn getSelectionOfNode(editor, currentNode.parent?.parent ?? currentNode);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn getSelectionOfNode(editor, currentNode.parent);\r\n\t\t\t}\r\n\t\tcase 'boolean':\r\n\t\t\tif(currentNode.parent === undefined) {\r\n\t\t\t\tvscode.window.showInformationMessage('No parent!?!?!?!?!?!');\r\n\t\t\t\treturn getSelectionOfNode(editor, currentNode);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn getSelectionOfNode(editor, currentNode.parent);\r\n\t\t\t}\r\n\t\tcase 'number':\r\n\t\t\tif(currentNode.parent === undefined) {\r\n\t\t\t\tvscode.window.showInformationMessage('No parent!?!?!?!?!?!');\r\n\t\t\t\treturn getSelectionOfNode(editor, currentNode);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn getSelectionOfNode(editor, currentNode.parent);\r\n\t\t\t}\r\n\t\tcase 'array':\r\n\t\t\tif(currentNode.parent === undefined) {\r\n\t\t\t\treturn getSelectionOfNode(editor, currentNode);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn getSelectionOfNode(editor, currentNode.parent);\r\n\t\t\t}\r\n\t\tcase 'object':\r\n\t\t\tif(currentNode.parent === undefined) {\r\n\t\t\t\treturn getSelectionOfNode(editor, currentNode);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn getSelectionOfNode(editor, currentNode.parent);\r\n\t\t\t}\r\n\r\n\t\tdefault:\r\n\t\t\tvscode.window.showErrorMessage('Not implementer yet.... \\n' + jsonNodeToString(currentNode));\r\n\t\t\treturn getSelectionOfNode(editor, currentNode);\r\n\t  }\r\n}\r\n\r\nexport function intoNode(editor : vscode.TextEditor, currentNode: json.Node) : vscode.Selection {\r\n\tswitch (currentNode.type) {\r\n\t\tcase 'property':\r\n\t\t\treturn getSelectionOfNode(editor, currentNode.children?.[1] ?? currentNode);\r\n\t\tcase 'string':\r\n\t\t\tif(currentNode.parent === undefined) {\r\n\t\t\t\tvscode.window.showInformationMessage('No parent!?!?!?!?!?!');\r\n\t\t\t\treturn getSelectionOfNode(editor, currentNode);\r\n\t\t\t}\r\n\t\t\telse if(currentNode.parent.type === 'property' && currentNode.parent.children?.[0] === currentNode) {\r\n\t\t\t\t// The string is the key in a property. Therefore we go to the value\r\n\t\t\t\treturn getSelectionOfNode(editor, currentNode.parent.children?.[1]);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// The string is a value\r\n\t\t\t\treturn getSelectionOfNode(editor, currentNode);\r\n\t\t\t}\r\n\t\tcase 'boolean':\r\n\t\t\treturn getSelectionOfNode(editor, currentNode);\r\n\t\tcase 'number':\r\n\t\t\treturn getSelectionOfNode(editor, currentNode);\r\n\r\n\t\tcase 'array':\r\n\t\t\tif(currentNode.children === undefined || currentNode.children?.length <= 0) {\r\n\t\t\t\treturn getSelectionOfNode(editor, currentNode); // Just select current node. TDOD: Do nothing instead?\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn getSelectionOfNode(editor, currentNode.children?.[0]); // Step into first\r\n\t\t\t}\r\n\t\tcase 'object':\r\n\t\t\tif(currentNode.children === undefined || currentNode.children?.length <= 0) {\r\n\t\t\t\treturn getSelectionOfNode(editor, currentNode); // Just select current node. TDOD: Do nothing instead?\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn getSelectionOfNode(editor, currentNode.children?.[0]); // Step into first property key\r\n\t\t\t}\r\n\r\n\t\tdefault:\r\n\t\t\tvscode.window.showErrorMessage('Not implementer yet.... \\n' + jsonNodeToString(currentNode));\r\n\t\t\treturn getSelectionOfNode(editor, currentNode);\r\n\t  }\r\n}\r\n\r\nexport function getSelectionOfNode(editor : vscode.TextEditor, node: json.Node) : vscode.Selection\r\n{\r\n\tconst nodeStart = editor.document.positionAt(node.offset);\r\n\tconst nodeEnd = editor.document.positionAt(node.offset + node.length);\r\n\treturn new vscode.Selection(nodeEnd, nodeStart);\r\n}\r\n\r\n\r\nexport function getCurrentNode(editor : vscode.TextEditor) {\r\n\tconst text = editor.document.getText();\r\n\tconst tree = json.parseTree(text);\r\n\tif(tree === undefined) {\r\n\t\tvscode.window.showErrorMessage('tree is undefined');\r\n\t\treturn;\r\n\t}\r\n\tconst position = editor.selection.active;\r\n\tconst offset = editor.document.offsetAt(position);\r\n\tlet node = json.findNodeAtOffset(tree, offset);\r\n\t\r\n\treturn node;\r\n}\r\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["createScanner","text","ignoreTrivia","len","length","pos","value","tokenOffset","token","lineNumber","lineStartOffset","tokenLineStartOffset","prevTokenLineStartOffset","scanError","scanHexDigits","count","exact","digits","ch","charCodeAt","scanNext","code","isWhiteSpace","String","fromCharCode","isLineBreak","result","start","substring","ch3","scanString","safeLength","commentClosed","isDigit","end","scanNumber","isUnknownContentCharacter","setPosition","newPosition","getPosition","scan","getToken","getTokenValue","getTokenOffset","getTokenLength","getTokenStartLine","getTokenStartCharacter","getTokenError","CharacterCodes","cachedSpaces","Array","fill","map","_","index","repeat","maxCachedValues","cachedBreakLinesWithSpaces","supportedEols","format","documentText","range","options","initialIndentLevel","formatText","formatTextStart","rangeStart","rangeEnd","offset","isEOL","endOffset","content","i","nChars","tabSize","charAt","Math","floor","computeIndentLevel","eol","getEOL","eolFastPathSupported","includes","indentValue","numberLineBreaks","indentLevel","insertSpaces","indentType","scanner","hasError","newLinesAndIndent","amountOfSpaces","keepLines","editOperations","addEdit","startOffset","push","firstToken","firstTokenStart","firstTokenEnd","secondToken","replaceContent","needsLineBreak","commentTokenStart","insertFinalNewline","s","indexOf","ParseOptions","parseTree","errors","DEFAULT","currentParent","type","children","parent","undefined","ensurePropertyComplete","onValue","valueNode","visit","onObjectBegin","onObjectProperty","name","onObjectEnd","onArrayBegin","onArrayEnd","onLiteralValue","getNodeType","onSeparator","sep","colonOffset","onError","error","findNodeAtLocation","root","path","node","segment","isArray","found","propertyNode","visitor","_scanner","_jsonPath","suppressedCallbacks","toOneArgVisit","visitFunction","arg","toOneArgVisitWithPath","slice","toBeginVisit","toEndVisit","onComment","disallowComments","allowTrailingComma","handleError","skipUntilAfter","skipUntil","parseString","isValue","allowEmptyContent","parseValue","isFirstElement","needsComma","pop","parseArray","parseObject","tokenValue","Number","isNaN","parseLiteral","withFormatting","edit","formattingOptions","newText","applyEdit","begin","edits","min","max","ScanError","SyntaxKind","position","segments","earlyReturnException","Object","previousNode","previousNodeInst","isAtPropertyKey","setPreviousNode","last","e","matches","pattern","k","currentProperty","previousParents","object","array","findNodeAtOffset","includeRightBound","contains","item","getNodePath","key","getNodeValue","obj","create","prop","replaceCh","kind","parts","replace","join","ParseErrorCode","printParseErrorCode","modify","originalPath","lastSegment","existing","Error","propertyIndex","removeBegin","removeEnd","previous","JSON","stringify","newProperty","getInsertionIndex","p","insertIndex","removalIndex","toRemove","isArrayInsertion","toModify","applyEdits","sortedEdits","sort","a","b","diff","lastModifiedOffset","context","vscode","commands","registerCommand","process","outOfNode","intoNode","nextNode","forEach","subscriptions","command","editor","window","activeTextEditor","showErrorMessage","getCurrentNode","debug","activeDebugSession","showWarningMessage","jsonNodeToString","selection","revealRange","Range","parentType","parentOffset","n","currentNode","getSelectionOfNode","currentIndex","showInformationMessage","nodeStart","document","positionAt","nodeEnd","Selection","getText","tree","json","active","offsetAt","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","d","definition","o","defineProperty","enumerable","get","prototype","hasOwnProperty","r","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}